#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# TODO
# - Do blur only one times
# - other layouts
# - fix content detection for romande energie
# - add http://www.graphicsmagick.org/GraphicsMagick.html#details-sharpen

import glob
import os
import re
import shutil
import subprocess
import time
import traceback
import yaml
import numpy as np
import cv2
from scipy.signal import find_peaks
from typing import List


mogrify = ['gm', 'mogrify']
convert = ['gm', 'convert']


def add_intermediate_error(config, config_file_name, error, tb):
    if 'intermediate_error' not in config:
        config['intermediate_error'] = []

    old_intermediate_error = []
    old_intermediate_error.extend(config['intermediate_error'])
    try:
        config['intermediate_error'].append({
            'error': error,
            'traceback': tb,
        })
        with open(config_file_name + '_', 'w') as config_file:
            config_file.write(yaml.safe_dump(config, default_flow_style=False))
    except Exception as ex:
        print(ex)
        config['intermediate_error'] = old_intermediate_error
        config['intermediate_error'].append({
            'error': str(error),
            'traceback': tb,
        })
        with open(config_file_name + '_', 'w') as config_file:
            config_file.write(yaml.safe_dump(config, default_flow_style=False))
    os.rename(config_file_name + '_', config_file_name)


def call(cmd, cmd2=None, **kwargs):
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    subprocess.check_output(cmd, stderr=subprocess.PIPE, **kwargs)


def output(cmd: List[str], cmd2=None, **kwargs) -> str:
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    return subprocess.check_output(cmd, stderr=subprocess.PIPE, **kwargs).decode()


def crop(
    img, marging_horizontal=25, maring_vertical=25, rm_top=25, rm_left=15, noise='7',
    blur='0x3', fuzz='25%'
):
    """
    Margin in px
    """
    o_w, o_h = [int(e) for e in output(convert + [
        img, '-format', '%w %h', 'info:-'
    ]).strip().split(' ')]
    w, h, x, y = [int(e) for e in re.split('[x+]', output(convert + [
        img, '-crop', '{}x{}+{}+{}'.format(o_w - rm_left, o_h - rm_top, rm_left, rm_top),
        '+repage', '-virtual-pixel', 'edge', '-noise', noise, '-blur', blur, '-fuzz',
        fuzz, '-format', '%@', 'info:-'
    ]).strip())]
    if h <= o_h and w <= o_w:
        call(convert + [img, '-background', '#ffffff', '-crop', '{}x{}+{}+{}'.format(
            w + 2 * marging_horizontal, h + 2 * maring_vertical,
            x - marging_horizontal + rm_left, y - maring_vertical + rm_top
        ), '+repage', img])


def save(root_folder, img, folder, force=False):
    if force or os.environ.get("PROGRESS") == "TRUE":
        dest_folder = os.path.join(root_folder, folder)
        if not os.path.exists(dest_folder):
            os.makedirs(dest_folder)
        dest_file = os.path.join(dest_folder, os.path.basename(img))
        shutil.copyfile(img, dest_file)
        return dest_file
    return img


def transform(config, root_folder):
    if 'intermediate_error' in config:
        del config['intermediate_error']

    images = list()
    if os.environ.get("EXPERIMENTAL") == "TRUE":
        for path in (
            'process',
            'scantailor',
            'scantailor-1200',
            'scantailor-advanced',
            'scantailor-advanced-1200',
            'scantailor-universal',
            'scantailor-universal-1200',
            'tesseract',
            'unpaper',
        ):
            if not os.path.exists(os.path.join(root_folder, path)):
                os.makedirs(os.path.join(root_folder, path))
    count = 0
    if config['args']['assisted_split']:
        config['assisted_split'] = []

    for nb, img in enumerate(config['images']):
        shutil.copyfile(os.path.join(root_folder, img), os.path.join(
            root_folder, 'process', os.path.basename(img)
        ))
        img = os.path.join(root_folder, 'process', os.path.basename(img))
        # force-cleanup
        if config['args']['level']:
            call(mogrify + ['-level', '15%,1,85%', img])
            save(root_folder, img, '1-cleanup')

        marging_horizontal = 100
        maring_vertical = 100
        crop(img, round(marging_horizontal / 10 / 2.51 * 300), round(maring_vertical / 10 / 2.51 * 300))
        save(root_folder, img, '2-precrop')

        try:
            call(['/opt/Deskew/Bin/deskew', '-b', 'FFFFFF', '-o', img + '.d.png', img])
            shutil.move(img + '.d.png', img)
            save(root_folder, img, '3-deskew')
        except subprocess.CalledProcessError as e:
            print(e)
            add_intermediate_error(
                config, config_file_name, e, traceback.format_exc().split('\n')
            )

        # Margin in mm
        marging_horizontal = 10
        maring_vertical = 7
        crop(
            img,
            round(marging_horizontal / 10 / 2.51 * 300),
            round(maring_vertical / 10 / 2.51 * 300)
        )
        save(root_folder, img, '4-crop')

        # sharpen
        call(mogrify + ['-sharpen', '0x2', img])
        save(root_folder, img, '5-sharpen')
        # dither
        # call(mogrify + ['+dither', img])
        # auto-rotate
        try:
            orientation = 0
            orientation = output([
                'tesseract', img, '-', '--psm', '0', '-l', 'osd'
            ])
#            orientation = output(['tesseract', img, '-', '--psm', '0', '-l', 'fra+eng'])
            orientation = [
                e for e in orientation.splitlines() if 'Orientation in degrees' in e
            ]
            orientation = '-' + orientation[0].split()[3]

            call(mogrify + ['-rotate', orientation, img])
            save(root_folder, img, '6-autorotate')
        except subprocess.CalledProcessError as e:
            add_intermediate_error(
                config, config_file_name, e, traceback.format_exc().split('\n')
            )

        # is empty ?
        w, h = [int(e) for e in output(convert + [
            img, '-format', '%w %h', 'info:-'
        ]).split(' ')]
        if output(convert + [
            img, '-noise', '7', '-blur', '0x5', '-level', '20%,1,80%', '-draw',
            'point {},{}'.format(w/2, h/2), '-format', '%@', 'info:-'
        ])[0:4] == '1x1+':
            print("Ignore image with no content: {}".format(img))
            continue

        if config['args']['assisted_split']:
            split = {}
            config['assisted_split'].append(split)
            split['destinations'] = [len(config['images']) * 2 - nb, nb + 1]

            image = cv2.imread(img)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 50, 150, apertureSize=3)
            lines = cv2.HoughLinesP(
                image=edges, rho=0.02, theta=np.pi/500, threshold=10, lines=np.array([]), minLineLength=100,
                maxLineGap=100
            )

            def draw_line(limits, image, vertical, i, p, value):
                img_len = image.shape[0 if vertical else 1]
                color = (255, 0, 0) if vertical else (0, 255, 0)
                cv2.line(
                    image, (p - 1, img_len), (p - 1, img_len - value), color, 2, cv2.LINE_AA
                )
                cv2.putText(
                    image, str(i), (p, img_len - value), cv2.FONT_HERSHEY_SIMPLEX, 2.0, color, 4
                )
                limits.append({
                    'name': i,
                    'value': value,
                    'type': 'veritcal' if vertical else 'horizontal',
                    'margin': 0,
                })

            def fill_limits(vertical):
                values = np.zeros(image.shape[1 if vertical else 0])
                for i in range(lines.shape[0]):
                    line = lines[i][0]
                    if line[0 if vertical else 1] == line[2 if vertical else 3]:
                        values[line[0 if vertical else 1]] += \
                            line[1 if vertical else 0] - line[3 if vertical else 2]
                v2 = np.correlate(values, [
                    # .1, .2, .3, .4, .5, .6, .7, .8, .9, 1, .9, .8, .7, .6, .5, .4, .3, .2, .1
                    .2, .4, .6, .8, 1, .8, .6, .4, .2
                ])
                peaks, properties = find_peaks(values, height=100, distance=20)

                limits = []
                split['limits'] = limits
                if len(peaks) > 0:
                    for i, p in enumerate(peaks):
                        value = int(round(properties['peak_heights'][i]))
                        draw_line(limits, image, vertical, i, p, value)
                else:
                    i = 1
                    p = image.shape[1 if vertical else 0] / 2
                    draw_line(limits, image, vertical, i, p, image.shape[0 if vertical else 1] / 2)

            fill_limits(True)
            fill_limits(False)

            name = os.path.join(root_folder, os.path.basename(img))
            split['image'] = name
            split['source'] = save(root_folder, img, '7-assisted-split', True)
            cv2.imwrite(name, image)
            images.append(name)

        else:
            img2 = os.path.join(root_folder, os.path.basename(img))
            call(convert + [img, img2])
            images.append(img2)

        if os.environ.get("EXPERIMENTAL") == "TRUE":
            try:
                w, h = [int(e) for e in output(convert + [
                    img, '-format', '%w %h', 'info:-'
                ]).strip().split(' ')]
                folder = os.path.join(root_folder, 'auto-split')
                if not os.path.exists(folder):
                    os.makedirs(folder)

                count += 1
                call(convert + [
                    '-crop', '{}x{}+0+0'.format(w / 2, h),
                    img, os.path.join(folder, 'image-{}.png'.format(count))
                ])
                count += 1
                call(convert + [
                    '-crop', '{}x{}+{}+0'.format(w / 2, h, w / 2),
                    img, os.path.join(folder, 'image-{}.png'.format(count))
                ])
            except Exception as e:
                print('Error: {}'.format(e))

            try:
                call([
                    'scantailor-cli', '--dpi=300', '--content-detection=normal',
                    '--output-dpi=300', '--color-mode=color_grayscale',
                    img, os.path.join(root_folder, 'scantailor')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'scantailor-cli', '--dpi=300', '--output-dpi=1200',
                    img, os.path.join(root_folder, 'scantailor-1200')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'scantailor-advanced-cli', '--dpi=300', '--content-detection=normal',
                    '--output-dpi=300', '--color-mode=color_grayscale',
                    img, os.path.join(root_folder, 'scantailor-advanced')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'scantailor-advanced-cli', '--dpi=300', '--output-dpi=1200',
                    img, os.path.join(root_folder, 'scantailor-advanced-1200')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'scantailor-universal-cli', '--dpi=300', '--content-detection=normal',
                    '--output-dpi=300', '--color-mode=color_grayscale',
                    img, os.path.join(root_folder, 'scantailor-universal')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'scantailor-universal-cli', '--dpi=300', '--output-dpi=1200',
                    img, os.path.join(root_folder, 'scantailor-universal-1200')
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call([
                    'unpaper', '--overwrite', img, os.path.join(root_folder, 'unpaper', os.path.basename(img))
                ])
            except Exception as e:
                print('Error: {}'.format(e))
            try:
                call('tesseract -l fra+eng {} stdout pdf > {}'.format(
                    img, os.path.join(root_folder, 'tesseract', os.path.basename(img))
                ), shell=True)
            except Exception as e:
                print('Error: {}'.format(e))

    return images


def split(config, root_folder):
    for split in config['assisted_split']:
        if len(split['limits']) > 0:
            if len(split['limits']) != len(split['destination']) + 1:
                raise Exception("Wrong number of limits ({}) or destionations ({}) for img '{}'".format(
                    len(split['limits']), len(split['destination']), split['source']
                ))
            type_ = split['limits'][0]['type']
            for limit in split['limits']:
                if limit['type'] != type_:
                    raise Exception("Mix of limit type for img '{}'".format(split['source']))

    for split in config['assisted_split']:
        os.unlink(split['name'])

    append = {}
    transformed_images = []
    for split in config['assisted_split']:
        img = split['source']
        w, h = [int(e) for e in output(convert + [
            img, '-format', '%w %h', 'info:-'
        ]).strip().split(' ')]
        type_ = split['limits'][0]['type']
        last_pos = 0
        for nb, destination in enumerate(split['destinations']):
            value = split['value']
            margin = split['margin']
            if type_ == 'vertical':
                call(convert + [
                    '-crop', '{}x{}+{}+0'.format(split['value'] - margin - last_pos, h, last_pos),
                    img, os.path.join(root_folder, 'image-{}.png'.format(destination))
                ])
            else:
                call(convert + [
                    '-crop', '{}x{}+0+{}'.format(w, split['value'] - margin - last_pos, last_pos),
                    img, os.path.join(root_folder, 'image-{}.png'.format(destination))
                ])
            last_pos = split['value'] + margin
            if re.match(r'[0-9]+\.[0-9]+', destination):
                page, pos = [int(e) for e in destination.split('.')]
                if page not in append:
                    append[page] = []
                append[page].append({
                    'name': img,
                    'pos': pos,
                    'type': type_
                })
            else:
                save(root_folder, img, '8-split')
                marging_horizontal = 10
                maring_vertical = 7
                crop(
                    img,
                    round(marging_horizontal / 10 / 2.51 * 300),
                    round(maring_vertical / 10 / 2.51 * 300)
                )
                save(root_folder, img, '9-crop')
                transformed_images.append(img)

    for page, items in append.items():
        type_ = items[0]['type']
        for e in items:
            if e['type'] != type_:
                raise Exception("Mix of limit type for pahe '{}'".format(page))

        call(convert + [e['name'] for e in sorted(items, key=lambda e: e['pos'])] + [
            '-background', '#ffffff', '-append' if type_ == 'vertical' else '+append',
            os.path.join(root_folder, 'image-{}.png'.format(page))
        ])
        save(root_folder, img, '8-split')
        transformed_images.append(img)

    config['splitted'] = True
    config['transformed_images'] = sorted(transformed_images)


def finalise(config, root_folder):

    full_name = config['full_name']
    destination = config['destination']

    print(destination)
    if os.path.exists(destination):
        return

    images = config['transformed_images']

    if config['args']['append_credit_card']:
        images2 = []
        for img in images:
            if os.path.exists(img):
                    images2.append(img)

        call(convert + images2 + [
            '-background', '#ffffff', '-append', os.path.join(root_folder, 'final.png')
        ])
        images = [os.path.join(root_folder, 'final.png')]

    pdf = []
    for img in images:
        if os.path.exists(img):
            name = os.path.splitext(os.path.basename(img))[0]
            call('tesseract -l fra+eng {} stdout pdf > {}'.format(
                img, os.path.join(root_folder, '{}-tesseract.pdf'.format(name))
            ), shell=True)
            call(convert + [img, os.path.join(root_folder, '{}.pdf'.format(name))])
            pdf.append(os.path.join(root_folder, '{}.pdf'.format(name)))

    call(['pdftk'] + pdf + ['output', destination, 'compress'])
    call(['exiftool', '-overwrite_original_in_place', '-Title=' + full_name, destination])

    shutil.rmtree(root_folder)

#    call(['chmod', '-R', 'go+rw', '/destination'])


mtime = time.ctime(os.path.getmtime('/opt/process'))

print('Welcome to scaned images document to paperless.')
print('Script time: ' + mtime)
while True:
    for config_file_name in glob.glob('/source/*/config.yaml'):
        if not os.path.exists(config_file_name):
            continue

        root_folder = os.path.dirname(config_file_name)

        with open(config_file_name) as config_file:
            config = yaml.safe_load(config_file.read())
        if config is None:
            if not os.path.exists(os.path.join(root_folder, 'error.yaml')):
                with open(os.path.join(root_folder, 'error.yaml'), 'w') as error_file:
                    error_file.write(yaml.safe_dump({
                        'error': 'Empty config',
                    }, default_flow_style=False))
            continue

        if os.path.exists(os.path.join(root_folder, 'error.yaml')):
            continue

        if os.path.exists(os.path.join(root_folder, 'error.yaml')):
            os.remove(os.path.join(root_folder, 'error.yaml'))

        try:
            allready_proceed = True
            if 'transformed_images' not in config:
                allready_proceed = False
            else:
                for img in config['transformed_images']:
                    if not os.path.exists(img):
                        allready_proceed = False

            if allready_proceed:
                if not os.path.exists(os.path.join(root_folder, 'REMOVE_TO_CONTINUE')):
                    if config['args']['assisted_split'] and not config.get('splitted', False):
                        print(re.sub(r'.', '-', config_file_name))
                        print(config_file_name)
                        print("Split")
                        split(config, root_folder)
                    else:
                        print(re.sub(r'.', '-', config_file_name))
                        print(config_file_name)
                        print("Finalise")
                        finalise(config, root_folder)

            else:
                ok = True
                for img in config['images']:
                    if not os.path.exists(os.path.join(root_folder, img)):
                        ok = False

                if ok:
                    print(re.sub(r'.', '-', config_file_name))
                    print(config_file_name)
                    print("Transform")

                    config['transformed_images'] = transform(config, root_folder)
                    with open(config_file_name + '_', 'w') as config_file:
                        config_file.write(yaml.safe_dump(config, default_flow_style=False))
                    os.rename(config_file_name + '_', config_file_name)

                    with open(os.path.join(root_folder, 'REMOVE_TO_CONTINUE'), 'w') as waiting_file:
                        pass

        except Exception as e:
            print(e)
            try:
                with open(os.path.join(root_folder, 'error.yaml'), 'w') as error_file:
                    error_file.write(yaml.dump({
                        'error': e,
                        'traceback': traceback.format_exc().split('\n'),
                    }, default_flow_style=False))
            except Exception as ex:
                print(ex)
                with open(os.path.join(root_folder, 'error.yaml'), 'w') as error_file:
                    error_file.write(yaml.safe_dump({
                        'error': str(e),
                        'traceback': traceback.format_exc().split('\n'),
                    }, default_flow_style=False))

    time.sleep(30)
