#!/home/sbrunner/.py/bin/python3
# -*- coding: utf-8 -*-
# TODO
# - Do blure only one times
# - other layouts
# - fix content detection for romande energie
# - add http://www.graphicsmagick.org/GraphicsMagick.html#details-sharpen

import argcomplete
import argparse
import sqlite3
import subprocess
import os
import shutil
import datetime
import random
import re
import yaml
import subprocess

root_folder = '/home/sbrunner/dsl/paperless/scan/{}/source'.format(random.randint(0, 999999))
os.makedirs(root_folder)

connection = sqlite3.connect('/home/sbrunner/dsl/paperless/data/db.sqlite3')
cursor = connection.cursor()

auto_complete_parser = argparse.ArgumentParser()
parser = argparse.ArgumentParser()

def add_argument(name, **kwargs):
    auto_complete_parser.add_argument(name, **kwargs)
    if 'choices' in kwargs:
        del kwargs['choices']
    parser.add_argument(name, **kwargs)

add_argument(
    '--no-adf',
    dest='adf',
    action='store_false',
    help="Don't use ADF"
)
add_argument(
    '--no-force-cleanup',
    dest='force_cleanup',
    action='store_false',
    help="Don't use ADF"
)
add_argument(
    '--new-crop',
    action='store_true',
    help="Use the old image magic crop"
)
add_argument(
    '--no-crop',
    action='store_true',
    help="Use the old image magic crop"
)
add_argument(
    '--correspondent',
    choices=[t[0] for t in cursor.execute('select name from documents_correspondent')],
    help='The correspondent'
)
add_argument(
    'title',
    nargs='+',
    choices=['No title'],
    help='The document title'
)
add_argument(
    '--date',
    choices=[datetime.date.today().strftime('%Y%m%d')],
    help='The document date'
)
add_argument(
    '--tag',
    action='append',
    dest="tags",
    default=[],
    choices=[t[0] for t in cursor.execute('select name from documents_tag')],
    help='The document tags'
)
add_argument(
    '--double-sided',
    action='store_true',
    help='Number of pages in double sided mode'
)

add_argument(
    '--append-credit-card',
    action='store_true',
    help='Append vertically the credit card'
)

connection.close()
argcomplete.autocomplete(auto_complete_parser)
args = parser.parse_args()

mogrify = ['gm', 'mogrify']
convert = ['gm', 'convert']

"""def call(cmd, cmd2=None, **kwargs):
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    success = False
    while not success:
        try:
            subprocess.check_call(cmd, **kwargs)
            success = True
        except subprocess.CalledProcessError:
            if cmd2 is not None:
                subprocess.call(cmd2)
            pass

def output(cmd, cmd2=None, **kwargs):
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    success = False
    while not success:
        try:
            subprocess.check_output(cmd, **kwargs)
            success = True
        except subprocess.CalledProcessError:
            if cmd2 is not None:
                subprocess.call(cmd2)
            pass
"""


def call(cmd, cmd2=None, **kwargs):
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    try:
        subprocess.check_call(cmd, **kwargs)
    except subprocess.CalledProcessError as e:
        print(e)
        exit(1)


def output(cmd, cmd2=None, **kwargs):
    print(' '.join(cmd) if isinstance(cmd, list) else cmd)
    try:
        return subprocess.check_output(cmd, **kwargs)
    except subprocess.CalledProcessError as e:
        print(e)
        exit(1)

try:
    scanimage = [
        'scanimage', '--device=hpaio:/usb/HP_LaserJet_MFP_M129-M134?serial=VNC8K00063', '--format=png', '--mode=color', '--resolution=300', '--batch={}/image-%d.png'.format(root_folder),
        '--source=ADF' if args.adf else '--batch-prompt'
    ]

    if args.double_sided:
        call(scanimage + ['--batch-start=1', '--batch-increment=2'])
        odd = os.listdir(root_folder)
        input('Put your document in the automatic document feeder for the other side, and press enter.')
        call(scanimage + ['--batch-start={}'.format(len(odd) * 2), '--batch-increment=-2', '--batch-count={}'.format(len(odd))])
        for img in os.listdir(root_folder):
            if img not in odd:
                call(mogrify + ['-rotate', '180', os.path.join(root_folder, img)])
    else:
        call(scanimage)

    images = []
    for img in os.listdir(root_folder):
        if not img.startswith('image-'):
            continue
        images.append(os.path.join('source', img))

    full_name = ' '.join(args.title)
    if args.correspondent is not None:
        full_name = '{} - {}'.format(args.correspondent, full_name)
    if args.date is not None:
        full_name = '{}Z - {}'.format(args.date, full_name)
    if len(args.tags) > 0:
        full_name = '{} - {}'.format(full_name, ','.join(args.tags))
    destination = '/destination/{}.pdf'.format(
        full_name
    )
    
    images = sorted(images)
    config = {
        'images': sorted(images),
        'full_name': full_name,
        'destination': destination,
        'args': dict(args._get_kwargs()),
    }
    with open(os.path.join(os.path.dirname(root_folder), 'config.yaml'), 'w') as config_file:
        config_file.write(yaml.dump(config))

except subprocess.CalledProcessError as e:
    print(e)
    exit(1)

print(root_folder)
subprocess.call(['eog', root_folder])
