---
name: Build

on:
  push:

env:
  IN_CI: '1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v2

      - run: sudo python3 -m pip install --requirement=ci/requirements.txt

      - name: Checks
        run: c2cciutils-checks

      - run: docker build --target=base --tag=sbrunner/scan-to-paperless .
      - run: docker build --target=tests --tag=tests .
      - run: docker run --rm tests prospector
      - name: Init Docker volumes
        run: |
          docker run --rm --detach --name volumes --volume=tests:/tests --volume=results:/results alpine tail -f /dev/null
          docker cp tests/ volumes:/tests/
      - name: pytest
        run: >
          docker run --rm --env=PYTHONPATH=/opt/
          --volume=results:/results --volume=tests:/tests
          tests bash -c '
          mv /opt/process /opt/process.py &&
          cd /tests &&
          coverage run --source=process --module pytest --durations=0 --verbose --color=yes
          --profile --profile-svg --junitxml=/results/test-reports/junit.xml . &&
          coverage report &&
          coverage html --directory=/results/coverage'
      - name: Extract data from Docker volumes
        run: |
          docker cp volumes:/results/ ./
          mkdir -p results/
          docker cp volumes:/tests/prof/ results/
      - uses: actions/upload-artifact@v1
        with:
          name: results
          path: results
      - uses: actions/upload-artifact@v1
        with:
          name: Test report
          path: results/test-reports

      - run: docker build --target=all --tag=sbrunner/scan-to-paperless:latest-all .
      - run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

      - name: Init pypi
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
          pip install --user wheel twine

      - name: Bump version
        run: |
          pip install --user bump-anything
          bump minor
          git add setup.py
          git commit --allow-empty -m "[skip ci] Bump Version"
          git push
        if: github.ref == 'refs/heads/master'

      - name: Publish
        run: |
          c2cciutils-publish --type=version_tag
          c2cciutils-publish --group=docker
